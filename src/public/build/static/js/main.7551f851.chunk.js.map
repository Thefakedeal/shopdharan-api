{"version":3,"sources":["components/RedScreen.js","components/Loading.js","components/Logo.js","components/LoadingScreen.js","shopdharan.png","shopdharan-white.png","routes/Admin.js","routes/Supplier.js","routes/User.js","routes/Main.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","fullscreen","display","flexDirection","backgroundColor","COLORS","PRIMARY_RED","flex","alignItems","justifyContent","minHeight","RedScreen","children","styles","className","DisplayLoading","loading","color","props","CircularProgress","logo","width","padding","objectFit","Logo","variant","toLowerCase","logoWhite","logoRed","src","alt","LoadingScreen","module","exports","AdminComponent","React","lazy","Admin","fallback","SupplierComponent","UserComponent","Main","path","component","Supplier","User","App","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","PRIMARY_WHITE","grey","PRIMARY_DARK","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAIMA,EAAYC,YAAW,CACzBC,WAAW,CACPC,QAAS,OACTC,cAAe,SACfC,gBAAiBC,EAAOC,YACxBC,KAAM,EACNC,WAAY,SACZC,eAAgB,SAChBC,UAAW,WAGJ,SAASC,EAAT,GAAgC,IAAZC,EAAW,EAAXA,SACzBC,EAASd,IACf,OACI,yBAAKe,UAAWD,EAAOZ,YACjBW,G,oBChBC,SAASG,EAAT,GAAqD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAUC,EAAQ,mCAC/D,OAAGF,EAAgB,kBAACG,EAAA,EAAD,eAAmBF,MAAOA,GAAO,WAAeC,IAC5D,K,sCCALnB,EAAYC,YAAW,CAC3BoB,KAAK,CACHC,MAAM,SACNC,QAAS,GACTC,UAAW,aAIA,SAASC,EAAT,GAA4C,IAAD,IAA5BC,eAA4B,MAApB,QAAoB,EAARP,EAAQ,2BAClDL,EAASd,IACTqB,EAAgC,UAAzBK,EAAQC,cAAyBC,IAAUC,IACxD,OAAO,uCAAKC,IAAKT,EAAMN,UAAWD,EAAOO,MAAUF,EAA5C,CAAmDY,IAAI,iBCXjD,SAASC,IACpB,OACG,kBAACpB,EAAD,KACI,kBAACa,EAAD,MACA,kBAAC,EAAD,CAASP,MAAM,YAAYD,SAAS,O,wICT/CgB,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,8C,oKCErCC,EAAiBC,IAAMC,MAAK,kBAAM,8DAEzB,SAASC,IACtB,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAM,kBAACP,EAAA,EAAD,QACxB,kBAACG,EAAD,OCLN,IAAMK,EAAoBJ,IAAMC,MAAK,kBAAM,uDAE5B,SAASC,IACtB,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAM,kBAACP,EAAA,EAAD,QACxB,kBAACQ,EAAD,OCLN,IAAMC,EAAgBL,IAAMC,MAAK,kBAAM,8DAExB,SAASC,IACtB,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAM,kBAACP,EAAA,EAAD,QACxB,kBAACS,EAAD,OCDS,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAWC,IACnC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOK,KAAK,IAAIC,UAAWE,MCFpBC,MARf,WACE,OACE,yBAAKhC,UAAU,OACX,kBAAC2B,EAAD,QCOYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCRAC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAMnD,EAAOC,aAEfmD,UAAW,CACTD,KAAMnD,EAAOqD,eAEfC,KAAM,CACJH,KAAMnD,EAAOuD,iBAMnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAeZ,MAAOA,GACpB,kBAAC,EAAD,QAGJa,SAASC,eAAe,SDoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7551f851.chunk.js","sourcesContent":["import React from 'react'\nimport COLORS from '../defaults/colors.json'\nimport {makeStyles} from '@material-ui/core'\n\nconst useStyles = makeStyles({\n    fullscreen:{\n        display: \"flex\",\n        flexDirection: \"column\",\n        backgroundColor: COLORS.PRIMARY_RED,\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        minHeight: \"100vh\",\n    }\n})\nexport default function RedScreen({children}) {\n    const styles = useStyles()\n    return (\n        <div className={styles.fullscreen}>\n             {children}\n        </div>\n    )\n}\n","import React from 'react'\nimport {CircularProgress} from '@material-ui/core'\n\nexport default function DisplayLoading({loading, color, ...props}) {\n    if(loading) return <CircularProgress  color={color||\"primary\"} {...props}/>\n    return null;\n}\n","import React from \"react\";\nimport {makeStyles} from '@material-ui/core'\nimport logoRed from \"../shopdharan.png\";\nimport logoWhite from '../shopdharan-white.png'\n\nconst useStyles = makeStyles({\n  logo:{\n    width:\"80vmin\",\n    padding: 50,\n    objectFit: \"contain\"\n  }\n})\n\nexport default function Logo({variant=\"white\", ...props}) {\n  const styles = useStyles()\n  const logo= (variant.toLowerCase())===\"white\"?logoWhite:logoRed;\n  return <img src={logo} className={styles.logo} {...props} alt=\"Shop Dharan\"/>;\n}\n","import React from 'react'\nimport RedScreen from '../components/RedScreen'\nimport Loading from '../components/Loading'\nimport Logo from '../components/Logo'\n\nexport default function LoadingScreen() {\n    return (\n       <RedScreen>\n           <Logo />\n           <Loading color=\"secondary\" loading={true}/>\n       </RedScreen>\n    )\n}\n","module.exports = __webpack_public_path__ + \"static/media/shopdharan.f6198331.png\";","module.exports = __webpack_public_path__ + \"static/media/shopdharan-white.24657495.png\";","import React, { Suspense } from \"react\";\nimport LoadingScreen from \"../components/LoadingScreen\";\nconst AdminComponent = React.lazy(() => import(\"../admin/App\"));\n\nexport default function Admin() {\n  return (\n    <Suspense fallback={() => <LoadingScreen />}>\n      <AdminComponent />\n    </Suspense>\n  );\n}\n","import React, { Suspense } from \"react\";\nimport LoadingScreen from \"../components/LoadingScreen\";\nconst SupplierComponent = React.lazy(() => import(\"../supplier/App\"));\n\nexport default function Admin() {\n  return (\n    <Suspense fallback={() => <LoadingScreen />}>\n      <SupplierComponent />\n    </Suspense>\n  );\n}","import React, { Suspense } from \"react\";\nimport LoadingScreen from \"../components/LoadingScreen\";\nconst UserComponent = React.lazy(() => import(\"../user/App\"));\n\nexport default function Admin() {\n  return (\n    <Suspense fallback={() => <LoadingScreen />}>\n      <UserComponent />\n    </Suspense>\n  );\n}","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Admin from './Admin'\nimport Supplier from './Supplier'\nimport User from './User'\n\nexport default function Main() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/supplier\" component={Supplier} />\n        <Route path=\"/admin\" component={Admin} />\n        <Route path=\"/\" component={User} />\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport Main from \"./routes/Main\";\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport COLORS from \"./defaults/colors.json\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: COLORS.PRIMARY_RED,\n    },\n    secondary: {\n      main: COLORS.PRIMARY_WHITE,\n    },\n    grey: {\n      main: COLORS.PRIMARY_DARK,\n    },\n  },\n  \n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}